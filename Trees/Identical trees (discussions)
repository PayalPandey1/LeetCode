// METHOD 1 (MINIMAL LINES OF CODE)

//
// Algorithm for the recursion:
// 1)
// If one of the node is NULL then return the equality result of p an q.
// This boils down to if both are NULL then return true, 
// but if one of them is NULL but not the other one then return false
// 2)
// At this point both root nodes represent valid pointers.
// Return true if the root nodes have same value and 
// the left tree of the roots are same (recursion)
// and the right tree of the roots are same (recursion). 
// Otherwise return false. 
//

bool isSameTree(TreeNode *p, TreeNode *q) {
    if (p == NULL || q == NULL) return (p == q);
    return (p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
}





// Recursively
bool isSameTree1(TreeNode* p, TreeNode* q) {
    if (p && q)
        return p->val==q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    return p == q;
}

// BFS + queue
bool isSameTree(TreeNode* p, TreeNode* q) {
    queue<pair<TreeNode*, TreeNode*>> myQueue;
    myQueue.push(pair<TreeNode*, TreeNode*>(p, q));
    while (!myQueue.empty()) {
        p = myQueue.front().first;
        q = myQueue.front().second;
        if(!p ^ !q || (p && q && p->val != q->val))
            break;
        myQueue.pop();
        if(p && q) {
            myQueue.push(pair<TreeNode*, TreeNode*>(p->left, q->left));
            myQueue.push(pair<TreeNode*, TreeNode*>(p->right, q->right));
        }
    }
    return myQueue.empty();
}

// DFS + stack
bool isSameTree3(TreeNode* p, TreeNode* q) {
    stack<pair<TreeNode*, TreeNode* >> myStack;
    myStack.push(pair<TreeNode*, TreeNode*>(p, q));
    while (!myStack.empty()) {
        p = myStack.top().first;
        q = myStack.top().second;
        if (!p ^ !q || (p && q && p->val != q->val))
            break;
        myStack.pop();
        if (p && q) {
            myStack.push(pair<TreeNode*, TreeNode*> (p->right, q->right));
            myStack.push(pair<TreeNode*, TreeNode*> (p->left, q->left));
        }
    }
    return myStack.empty();
}
