/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    
    vector<int> postorder(Node* root) {
        vector<int>Res ;
        if(root == NULL)
            return Res ;
        stack<Node*>S ;
        S.push(root) ;
        set<Node*>Set ;
        Set.insert(root) ;
        while(!S.empty())
        {
            Node* node = S.top();
            cout << "top" << " " << node->val << " " ;
            vector<Node*>c = node->children ;
            bool flag = true ;
            for(int i = c.size() -1 ; i >= 0 ; i--)
            {
                if(Set.find(c[i]) == Set.end())
                {
                    flag = false ;
                }
            }
            if( c.size() == 0 or  flag == true)
            {
                cout << "popped" << " " << node->val << " " ;
                S.pop() ;
                Res.push_back(node->val) ;
            }
              
            for(int i = c.size() -1 ; i >= 0 ; i--)
            {
                if(Set.find(c[i]) == Set.end())
                {
                    cout << "pushed" << " " << c[i]->val << " " ;
                    S.push(c[i]) ;
                    Set.insert(c[i]) ;
                }
               
            }
            Set.insert(node) ;
        }
        return Res ;
        
    }
};
