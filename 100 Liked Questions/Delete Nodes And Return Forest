/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*>nodes ;
    vector<TreeNode*>res;
    
    void delete_nodes(TreeNode* root, TreeNode* delete_node, TreeNode* parent)
    {
        if(root == NULL){return ;}
        if(root == delete_node)
        {
            if(root->left == NULL and root->right == NULL)
            {
                if(parent->left == root)
                {
                    parent->left = NULL ;
                    //cout << "A";
                }
                if(parent->right == root)
                {
                    parent->right = NULL ;
                     //cout << "B";
                }
                return ;
            }
            else if(root->left == NULL and root->right != NULL)
            {
                res.push_back(root->right) ;
                if(parent->left == root)
                {
                    
                    parent->left->right = NULL ;
                    parent->left = NULL ;
                     //cout << "C";
                    
                }
                else if(parent->right == root)
                {
                   
                    parent->right->right = NULL ;
                     parent->right = NULL ;
                     //cout << "D";
                }
            }
            else if(root->left != NULL and root->right == NULL)
            {
                res.push_back(root->left) ;
                if(parent->left == root)
                {
                   
                    parent->left->left = NULL ;
                     parent->left = NULL ;
                    // cout << "E";
                    
                }
                else if(parent->right == root)
                {
                     
                    parent->right->left = NULL ;
                    parent->right = NULL ;
                    // cout << "F";
                }
            }
            else
            {
                 res.push_back(root->left) ;
                 res.push_back(root->right) ;
                 if(parent->left == root)
                 {
                    
                    parent->left->left = NULL ;
                    parent->left->right = NULL ;
                     parent->left = NULL ;
                     //cout << "G";
                    
                 }
                 else if(parent->right == root)
                 {
                    
                    parent->right->left = NULL ;
                    parent->right->right = NULL ;
                     parent->right = NULL ;
                     // cout << "H";
                 }
                
            }
         
       }
        //cout << "root->left->val" << " " << root->left->val << endl ;  
        delete_nodes(root->left, delete_node, root);
        delete_nodes(root->right, delete_node, root);    
    }
    priority_queue< pair<int, TreeNode*> >priority_queue;
    void find_node(TreeNode* root,int target, int curr_level)
    {
        if(root == NULL){return;}
        if(root->val == target){
            nodes.push_back(root);
            priority_queue.push(make_pair(curr_level, root) );
            return;
        }
        find_node(root->left, target, curr_level + 1);
        find_node(root->right, target, curr_level + 1);     
    }
    
    void delete_root(TreeNode* root)
    {
       if(root->left == NULL and root->right == NULL)
       {
           root = NULL ;
           return ;
       }
       else if(root->left == NULL and root->right != NULL)
       {
           res.push_back(root->right) ;
           root = NULL ;
           return ;
       }
        else if(root->left != NULL and root->right == NULL)
       {
           res.push_back(root->left) ;
           root = NULL ;
           return ;
       }
        else{
            res.push_back(root->left) ;
            res.push_back(root->right) ;
           root = NULL ;
           return ;
       }
    
    }
    
    
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        TreeNode* rc = root ;
         res.clear();
        if(to_delete.size() == 0)
        {
            res.push_back(root);
            return res ;
        }
       
        nodes.clear();
        for(int i=0; i < to_delete.size(); i++)
        {
            TreeNode *rcc = root;
            find_node(rcc, to_delete[i], 0) ;
        }  
        bool flag = false;
        while(!priority_queue.empty())
        {
             pair<int, TreeNode*>p =priority_queue.top();
             TreeNode* nodes = p.second ;
             priority_queue.pop() ;
             TreeNode* ptr = NULL;
             if(nodes == rc)
             {
                 delete_root(nodes);
                 flag = true ;
                 
             }
            else{    delete_nodes(rc, nodes, ptr);
                 
                }
          
             //cout << "deleted  "  << nodes->val << endl ;
        }
        if(!flag){res.push_back(root);}
        return res ;
    }
};
