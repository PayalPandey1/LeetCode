// NOT MY CODE:

/*
(Sorting : O(n2))
The above method requires extra space. We can solve in O(1) extra space. The idea is based on method 2 of this post.

1. Sort all element of array
2. Run loop from i=0 to n-2.
     Initialize two index variables l=i+1 and r=n-1
4. while (l < r) 
     Check sum of arr[i], arr[l], arr[r] is
     zero or not if sum is zero then print the
     triplet and do l++ and r--.
5. If sum is less than zero then l++
6. If sum is greater than zero then r--
7. If not exist in array then print not found.
filter_none
*/
//SORTING APPROACH
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ret;
        if (nums.size() < 3)
            return ret;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int i = 0; i < n - 2; i ++){
            if (nums[i] > 0) break;
            if (i > 0 && nums[i] == nums[i - 1]) continue; // the same one has been seen before, so we can skip it
            int left = i + 1, right = n - 1;
            while (left < right){ // O(n)
                int sum = nums[i] + nums[left] + nums[right];
                if (sum < 0){ // let sum be bigger to be equal to zero
                    left ++;
                }
                else if (sum > 0){ // let sum be smaller to be equral to zero
                    right --;
                }
                else {
                    ret.push_back({nums[i], nums[left], nums[right]});
                    int last_left = nums[left], last_right = nums[right];
                    while (left < right && nums[left] == last_left) left ++; // skip these same elements
                    while (left < right && nums[right] == last_right) right --; // skip these same elements                    
                }
            }
            
        }
        return ret;
    }
};



/* Check out the link-> https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/
Method 2 (Hashing : O(n2))
We iterate through every element. For every element arr[i], we find a pair with sum “-arr[i]”. This problem reduces to pairs sum and can be solved in O(n) time using hashing.

Run a loop from i=0 to n-2
  Create an empty hash table
  Run inner loop from j=i+1 to n-1
      If -(arr[i] + arr[j]) is present in hash table
         print arr[i], arr[j] and -(arr[i]+arr[j])
      Else
         Insert arr[j] in hash table.
*/
