/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int left = -1 ;
    int max_level ;
    void dfs(TreeNode* root, int level)
    {
        if(root == NULL){
            return ;
        }
        if(level > max_level)
        {
            max_level = level ;
            left = root->val ;
        }
        dfs(root->left, level+1);
        dfs(root->right, level +1) ;
        
    }
    
    int findBottomLeftValue(TreeNode* root) {
        left = -1 ;
        max_level = -1 ;
        
        dfs(root, 0);
        return left;
    }
};

**********************************************************************************************************************


int findBottomLeftValue(TreeNode* root) {
        if (!root)return -1;
        queue<TreeNode*> q;
        TreeNode* u = NULL; 
        q.push(root);
        while (!q.empty()) {
            int cnt = q.size();
            while (cnt--) {
                u = q.front();
                q.pop();
                if (u->right)q.push(u->right);
                if (u->left)q.push(u->left);
            }
        }
    return u->val;
    }
