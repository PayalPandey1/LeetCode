class Solution {
public:
    int max_level;
    int num  ;
    void dfs(TreeNode* root, int level, TreeNode* parent)
    {
        if(root == NULL){return ;}
        if(root->right == NULL and root->left == NULL)
        {
            level += 1 ;
             //cout << "root->val" << " " << root->val << " " << "level" << " " << level << endl ;
            if( max_level < level)
            {
                max_level = level ;
                num = root->val ;
            }
            else if(max_level == level)
            {
                num = num + root->val ;
            }
            return ;    
        }
        //cout << "root->val" << " " << root->val << " " << "level" << " " << level << "  " << "num" << " " << num << endl ;
         dfs(root->left, level + 1, root) ;
         dfs(root->right, level + 1, root) ;
        
    }
    int deepestLeavesSum(TreeNode* root) {
        TreeNode* parent = NULL ;
        max_level = 0 ;
        num = 0 ;
        int level  = 0;
        dfs(root, level, parent);
        return num;
        
    }
};
